import React from 'react';
import { Robot } from '../types/Robot';
import { Battery, Thermometer, Activity, Zap, AlertTriangle, CheckCircle, Brain, Signal, Target, Wrench } from 'lucide-react';

interface RobotDetailsProps {
  robots: Robot[];
  selectedRobots: Set<string>;
}

export const RobotDetails: React.FC<RobotDetailsProps> = ({ robots, selectedRobots }) => {
  const selectedRobotsList = robots.filter(robot => selectedRobots.has(robot.id));

  if (selectedRobotsList.length === 0) {
    return (
      <div className="bg-gray-900 border border-gray-600 rounded-lg p-8 text-center shadow-2xl">
        <div className="flex flex-col items-center gap-4">
          <div className="w-16 h-16 bg-gray-800 rounded-full flex items-center justify-center">
            <Activity className="w-8 h-8 text-gray-500" />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-gray-400 mb-2">No Robots Selected</h3>
            <p className="text-gray-500">Click on robots in the visualization to view detailed information</p>
          </div>
        </div>
      </div>
    );
  }

  const StatusBadge: React.FC<{ status: Robot['status'] }> = ({ status }) => {
    const getStatusConfig = (status: Robot['status']) => {
      switch (status) {
        case 'active':
          return { color: 'green', icon: CheckCircle, text: 'Active', bg: 'bg-green-900/30', border: 'border-green-600' };
        case 'inactive':
          return { color: 'gray', icon: Activity, text: 'Inactive', bg: 'bg-gray-900/30', border: 'border-gray-600' };
        case 'maintenance':
          return { color: 'yellow', icon: Wrench, text: 'Maintenance', bg: 'bg-yellow-900/30', border: 'border-yellow-600' };
        case 'error':
          return { color: 'red', icon: AlertTriangle, text: 'Error', bg: 'bg-red-900/30', border: 'border-red-600' };
        case 'charging':
          return { color: 'blue', icon: Zap, text: 'Charging', bg: 'bg-blue-900/30', border: 'border-blue-600' };
        case 'patrol':
          return { color: 'purple', icon: Target, text: 'Patrol', bg: 'bg-purple-900/30', border: 'border-purple-600' };
        default:
          return { color: 'gray', icon: Activity, text: 'Unknown', bg: 'bg-gray-900/30', border: 'border-gray-600' };
      }
    };

    const config = getStatusConfig(status);
    const Icon = config.icon;

    return (
      <div className={`flex items-center gap-2 px-3 py-1 ${config.bg} border ${config.border} rounded-full`}>
        <Icon className={`w-4 h-4 text-${config.color}-400`} />
        <span className={`text-${config.color}-300 text-sm font-medium`}>{config.text}</span>
      </div>
    );
  };

  const AiModeBadge: React.FC<{ mode: Robot['aiMode'] }> = ({ mode }) => {
    const getModeConfig = (mode: Robot['aiMode']) => {
      switch (mode) {
        case 'autonomous':
          return { color: 'blue', text: 'Autonomous AI', icon: 'ü§ñ' };
        case 'manual':
          return { color: 'gray', text: 'Manual Control', icon: 'üéÆ' };
        case 'learning':
          return { color: 'purple', text: 'Learning Mode', icon: 'üß†' };
        case 'patrol':
          return { color: 'orange', text: 'Patrol Mode', icon: 'üõ°Ô∏è' };
        default:
          return { color: 'gray', text: 'Unknown', icon: '‚ùì' };
      }
    };

    const config = getModeConfig(mode);

    return (
      <div className={`flex items-center gap-2 px-2 py-1 bg-${config.color}-900/20 border border-${config.color}-600/50 rounded text-xs`}>
        <span>{config.icon}</span>
        <span className={`text-${config.color}-300`}>{config.text}</span>
      </div>
    );
  };

  const MetricBar: React.FC<{
    label: string;
    value: number;
    max: number;
    color: string;
    icon: React.ReactNode;
    unit?: string;
    warning?: number;
    critical?: number;
  }> = ({ label, value, max, color, icon, unit = '%', warning, critical }) => {
    let barColor = color;
    if (critical && value <= critical) barColor = 'red';
    else if (warning && value <= warning) barColor = 'yellow';

    return (
      <div className="space-y-2">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2 text-sm text-gray-300">
            {icon}
            {label}
          </div>
          <span className={`text-${barColor}-400 font-medium text-sm`}>
            {value.toFixed(1)}{unit}
          </span>
        </div>
        <div className="w-full bg-gray-700 rounded-full h-2 overflow-hidden">
          <div 
            className={`bg-gradient-to-r from-${barColor}-600 to-${barColor}-400 h-2 rounded-full transition-all duration-300 shadow-sm`}
            style={{ width: `${Math.min((value / max) * 100, 100)}%` }}
          />
        </div>
      </div>
    );
  };

  const SensorGrid: React.FC<{ sensors: Robot['sensors'] }> = ({ sensors }) => (
    <div className="grid grid-cols-2 gap-3">
      <div className="bg-gray-800/50 rounded-lg p-3">
        <div className="flex items-center gap-2 mb-2">
          <div className="w-2 h-2 bg-green-400 rounded-full"></div>
          <span className="text-xs text-gray-400">LIDAR</span>
        </div>
        <span className="text-green-400 font-mono text-sm">{sensors.lidar.toFixed(1)}%</span>
      </div>
      <div className="bg-gray-800/50 rounded-lg p-3">
        <div className="flex items-center gap-2 mb-2">
          <div className="w-2 h-2 bg-blue-400 rounded-full"></div>
          <span className="text-xs text-gray-400">Camera</span>
        </div>
        <span className="text-blue-400 font-mono text-sm">{sensors.camera.toFixed(1)}%</span>
      </div>
      <div className="bg-gray-800/50 rounded-lg p-3">
        <div className="flex items-center gap-2 mb-2">
          <div className="w-2 h-2 bg-purple-400 rounded-full"></div>
          <span className="text-xs text-gray-400">Proximity</span>
        </div>
        <span className="text-purple-400 font-mono text-sm">{sensors.proximity.toFixed(1)}%</span>
      </div>
      <div className="bg-gray-800/50 rounded-lg p-3">
        <div className="flex items-center gap-2 mb-2">
          <div className="w-2 h-2 bg-orange-400 rounded-full"></div>
          <span className="text-xs text-gray-400">Gyroscope</span>
        </div>
        <span className="text-orange-400 font-mono text-xs">
          {sensors.gyroscope.x.toFixed(1)}, {sensors.gyroscope.y.toFixed(1)}, {sensors.gyroscope.z.toFixed(1)}
        </span>
      </div>
    </div>
  );

  return (
    <div className="bg-gray-900 border border-cyan-500 rounded-lg p-6 shadow-2xl">
      <h2 className="text-xl font-bold text-cyan-400 mb-6 flex items-center gap-2">
        <Activity className="w-6 h-6" />
        Advanced Robot Analytics ({selectedRobotsList.length} selected)
      </h2>
      
      <div className="space-y-6 max-h-[600px] overflow-y-auto custom-scrollbar">
        {selectedRobotsList.slice(0, 3).map(robot => (
          <div key={robot.id} className="bg-gradient-to-br from-gray-800 to-gray-900 border border-gray-700 rounded-xl p-6 space-y-6 shadow-lg">
            {/* Header */}
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <div className="w-12 h-12 bg-gradient-to-br from-cyan-600 to-blue-600 rounded-lg flex items-center justify-center shadow-lg">
                  <span className="text-white font-bold text-lg">
                    {robot.id.split('-')[1].slice(-2)}
                  </span>
                </div>
                <div>
                  <h3 className="font-mono text-cyan-300 font-bold text-lg">{robot.id}</h3>
                  <p className="text-gray-400 text-sm">
                    Position: ({robot.position.x.toFixed(0)}, {robot.position.y.toFixed(0)}) ‚Ä¢ 
                    Rotation: {robot.rotation.toFixed(0)}¬∞
                  </p>
                </div>
              </div>
              <div className="flex flex-col gap-2">
                <StatusBadge status={robot.status} />
                <AiModeBadge mode={robot.aiMode} />
              </div>
            </div>
            
            {/* Core Metrics */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <h4 className="text-cyan-300 font-semibold flex items-center gap-2">
                  <Battery className="w-4 h-4" />
                  Power & Performance
                </h4>
                <MetricBar
                  label="Battery Level"
                  value={robot.battery}
                  max={100}
                  color={robot.battery > 50 ? 'green' : robot.battery > 20 ? 'yellow' : 'red'}
                  icon={<Battery className="w-4 h-4" />}
                  warning={30}
                  critical={15}
                />
                <MetricBar
                  label="System Efficiency"
                  value={robot.efficiency}
                  max={100}
                  color="blue"
                  icon={<Activity className="w-4 h-4" />}
                />
                <MetricBar
                  label="Health Status"
                  value={robot.health}
                  max={100}
                  color={robot.health > 70 ? 'green' : robot.health > 40 ? 'yellow' : 'red'}
                  icon={<CheckCircle className="w-4 h-4" />}
                  warning={50}
                  critical={30}
                />
              </div>
              
              <div className="space-y-4">
                <h4 className="text-cyan-300 font-semibold flex items-center gap-2">
                  <Thermometer className="w-4 h-4" />
                  Environmental
                </h4>
                <MetricBar
                  label="Core Temperature"
                  value={robot.temperature}
                  max={80}
                  color={robot.temperature < 50 ? 'blue' : robot.temperature < 65 ? 'yellow' : 'red'}
                  icon={<Thermometer className="w-4 h-4" />}
                  unit="¬∞C"
                  warning={60}
                  critical={70}
                />
                <MetricBar
                  label="Signal Strength"
                  value={robot.communication.signalStrength}
                  max={100}
                  color="green"
                  icon={<Signal className="w-4 h-4" />}
                />
                <MetricBar
                  label="System Uptime"
                  value={robot.performance.uptime}
                  max={100}
                  color="purple"
                  icon={<Activity className="w-4 h-4" />}
                />
              </div>
            </div>

            {/* Advanced Metrics */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <h4 className="text-cyan-300 font-semibold flex items-center gap-2">
                  <Brain className="w-4 h-4" />
                  Performance Analytics
                </h4>
                <div className="grid grid-cols-2 gap-3">
                  <div className="bg-gray-800/50 rounded-lg p-3">
                    <span className="text-xs text-gray-400">Speed</span>
                    <div className="text-green-400 font-mono">{robot.performance.speed.toFixed(1)}%</div>
                  </div>
                  <div className="bg-gray-800/50 rounded-lg p-3">
                    <span className="text-xs text-gray-400">Accuracy</span>
                    <div className="text-blue-400 font-mono">{robot.performance.accuracy.toFixed(1)}%</div>
                  </div>
                  <div className="bg-gray-800/50 rounded-lg p-3">
                    <span className="text-xs text-gray-400">Reliability</span>
                    <div className="text-purple-400 font-mono">{robot.performance.reliability.toFixed(1)}%</div>
                  </div>
                  <div className="bg-gray-800/50 rounded-lg p-3">
                    <span className="text-xs text-gray-400">Latency</span>
                    <div className="text-orange-400 font-mono">{robot.communication.latency.toFixed(1)}ms</div>
                  </div>
                </div>
              </div>

              <div className="space-y-4">
                <h4 className="text-cyan-300 font-semibold flex items-center gap-2">
                  <Target className="w-4 h-4" />
                  Sensor Array
                </h4>
                <SensorGrid sensors={robot.sensors} />
              </div>
            </div>

            {/* Mission & Energy */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {robot.mission.currentObjective && (
                <div className="bg-gray-800/30 border border-purple-500/30 rounded-lg p-4">
                  <h4 className="text-purple-300 font-semibold mb-3 flex items-center gap-2">
                    <Target className="w-4 h-4" />
                    Current Mission
                  </h4>
                  <div className="space-y-2">
                    <div className="flex justify-between items-center">
                      <span className="text-gray-300 text-sm">{robot.mission.currentObjective}</span>
                      <span className={`px-2 py-1 rounded text-xs font-medium ${
                        robot.mission.priority === 'critical' ? 'bg-red-900/50 text-red-300' :
                        robot.mission.priority === 'high' ? 'bg-orange-900/50 text-orange-300' :
                        robot.mission.priority === 'medium' ? 'bg-yellow-900/50 text-yellow-300' :
                        'bg-gray-900/50 text-gray-300'
                      }`}>
                        {robot.mission.priority.toUpperCase()}
                      </span>
                    </div>
                    <div className="w-full bg-gray-700 rounded-full h-2">
                      <div 
                        className="bg-gradient-to-r from-purple-600 to-purple-400 h-2 rounded-full transition-all duration-300"
                        style={{ width: `${robot.mission.progress}%` }}
                      />
                    </div>
                    <div className="text-xs text-gray-400">
                      Progress: {robot.mission.progress.toFixed(1)}%
                    </div>
                  </div>
                </div>
              )}

              <div className="bg-gray-800/30 border border-green-500/30 rounded-lg p-4">
                <h4 className="text-green-300 font-semibold mb-3 flex items-center gap-2">
                  <Zap className="w-4 h-4" />
                  Energy Management
                </h4>
                <div className="space-y-3">
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-400">Consumption:</span>
                    <span className="text-red-400">{robot.energy.consumption.toFixed(1)}W</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-400">Solar Input:</span>
                    <span className="text-green-400">+{robot.energy.solarCharge.toFixed(1)}W</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-400">Battery Health:</span>
                    <span className={`${robot.energy.batteryHealth > 80 ? 'text-green-400' : 
                      robot.energy.batteryHealth > 60 ? 'text-yellow-400' : 'text-red-400'}`}>
                      {robot.energy.batteryHealth.toFixed(1)}%
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        ))}
        
        {selectedRobotsList.length > 3 && (
          <div className="text-center text-gray-400 text-sm bg-gray-800/30 rounded-lg p-4">
            <Activity className="w-6 h-6 mx-auto mb-2 opacity-50" />
            ... and {selectedRobotsList.length - 3} more robots selected
            <p className="text-xs mt-1">Select fewer robots to view detailed analytics</p>
          </div>
        )}
      </div>
    </div>
  );
};
