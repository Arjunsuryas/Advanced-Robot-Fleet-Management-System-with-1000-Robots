import React, { useState } from 'react';
import { Play, Pause, Square, Zap, Users, Settings, AlertTriangle, Brain, Target, Shield } from 'lucide-react';

interface ControlPanelProps {
  isRunning: boolean;
  onToggleRunning: () => void;
  onEmergencyStop: () => void;
  selectedCount: number;
  onActivateSelected: () => void;
  onDeactivateSelected: () => void;
  onSelectAll: () => void;
  onDeselectAll: () => void;
  formation: string;
  onFormationChange: (formation: 'grid' | 'circle' | 'line' | 'random' | 'swarm' | 'patrol') => void;
  aiEnabled: boolean;
  onAiToggle: () => void;
  onAssignMission: (mission: string, priority: 'low' | 'medium' | 'high' | 'critical') => void;
  emergencyMode: boolean;
}

export const ControlPanel: React.FC<ControlPanelProps> = ({
  isRunning,
  onToggleRunning,
  onEmergencyStop,
  selectedCount,
  onActivateSelected,
  onDeactivateSelected,
  onSelectAll,
  onDeselectAll,
  formation,
  onFormationChange,
  aiEnabled,
  onAiToggle,
  onAssignMission,
  emergencyMode
}) => {
  const [missionInput, setMissionInput] = useState('');
  const [missionPriority, setMissionPriority] = useState<'low' | 'medium' | 'high' | 'critical'>('medium');

  const handleAssignMission = () => {
    if (missionInput.trim() && selectedCount > 0) {
      onAssignMission(missionInput.trim(), missionPriority);
      setMissionInput('');
    }
  };

  return (
    <div className="bg-gray-900 border border-cyan-500 rounded-lg p-6 space-y-6 shadow-2xl">
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-bold text-cyan-400 flex items-center gap-2">
          <Settings className="w-6 h-6" />
          Advanced Fleet Control
        </h2>
        <div className="flex items-center gap-3">
          <div className={`w-3 h-3 rounded-full ${isRunning ? 'bg-green-400 animate-pulse' : 'bg-red-400'}`} />
          <span className="text-sm text-gray-400">
            {emergencyMode ? 'EMERGENCY' : isRunning ? 'ACTIVE' : 'STANDBY'}
          </span>
        </div>
      </div>

      {/* System Controls */}
      <div className="space-y-4">
        <h3 className="text-lg font-semibold text-cyan-300 flex items-center gap-2">
          <Shield className="w-5 h-5" />
          System Controls
        </h3>
        
        <div className="grid grid-cols-3 gap-3">
          <button
            onClick={onToggleRunning}
            disabled={emergencyMode}
            className={`flex items-center justify-center gap-2 px-4 py-3 rounded-lg font-medium transition-all transform hover:scale-105
              ${isRunning 
                ? 'bg-gradient-to-r from-orange-600 to-red-600 hover:from-orange-700 hover:to-red-700 text-white shadow-lg shadow-orange-500/25' 
                : 'bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white shadow-lg shadow-green-500/25'
              } ${emergencyMode ? 'opacity-50 cursor-not-allowed' : ''}`}
          >
            {isRunning ? <Pause className="w-5 h-5" /> : <Play className="w-5 h-5" />}
            {isRunning ? 'Pause' : 'Start'}
          </button>
          
          <button
            onClick={onEmergencyStop}
            className="flex items-center justify-center gap-2 px-4 py-3 bg-gradient-to-r from-red-600 to-red-800 hover:from-red-700 hover:to-red-900 text-white rounded-lg font-medium transition-all transform hover:scale-105 shadow-lg shadow-red-500/25"
          >
            <Square className="w-5 h-5" />
            Stop
          </button>

          <button
            onClick={onEmergencyStop}
            className={`flex items-center justify-center gap-2 px-4 py-3 rounded-lg font-medium transition-all transform hover:scale-105 border-2
              ${emergencyMode 
                ? 'bg-red-900 border-red-500 text-red-200 animate-pulse' 
                : 'bg-red-800 hover:bg-red-900 border-red-600 hover:border-red-500 text-white'
              } shadow-lg shadow-red-500/25`}
          >
            <AlertTriangle className="w-5 h-5" />
            Emergency
          </button>
        </div>

        {/* AI Control */}
        <div className="flex items-center justify-between p-4 bg-gray-800 rounded-lg border border-blue-500/30">
          <div className="flex items-center gap-3">
            <Brain className="w-6 h-6 text-blue-400" />
            <div>
              <h4 className="font-semibold text-blue-300">AI Coordination</h4>
              <p className="text-xs text-gray-400">Autonomous swarm intelligence</p>
            </div>
          </div>
          <button
            onClick={onAiToggle}
            className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors
              ${aiEnabled ? 'bg-blue-600' : 'bg-gray-600'}`}
          >
            <span
              className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform
                ${aiEnabled ? 'translate-x-6' : 'translate-x-1'}`}
            />
          </button>
        </div>
      </div>

      {/* Selection Controls */}
      <div className="space-y-4">
        <h3 className="text-lg font-semibold text-cyan-300 flex items-center gap-2">
          <Users className="w-5 h-5" />
          Selection Control ({selectedCount} robots)
        </h3>
        
        <div className="grid grid-cols-2 gap-2">
          <button
            onClick={onSelectAll}
            className="px-3 py-2 bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 text-white rounded-lg font-medium transition-all transform hover:scale-105 shadow-lg shadow-blue-500/25"
          >
            Select All
          </button>
          <button
            onClick={onDeselectAll}
            className="px-3 py-2 bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 text-white rounded-lg font-medium transition-all transform hover:scale-105"
          >
            Clear Selection
          </button>
        </div>

        <div className="grid grid-cols-2 gap-2">
          <button
            onClick={onActivateSelected}
            disabled={selectedCount === 0}
            className="flex items-center justify-center gap-2 px-3 py-2 bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 disabled:from-gray-600 disabled:to-gray-700 disabled:cursor-not-allowed text-white rounded-lg font-medium transition-all transform hover:scale-105 shadow-lg shadow-green-500/25"
          >
            <Zap className="w-4 h-4" />
            Activate
          </button>
          <button
            onClick={onDeactivateSelected}
            disabled={selectedCount === 0}
            className="flex items-center justify-center gap-2 px-3 py-2 bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 disabled:from-gray-600 disabled:to-gray-700 disabled:cursor-not-allowed text-white rounded-lg font-medium transition-all transform hover:scale-105 shadow-lg shadow-red-500/25"
          >
            <Square className="w-4 h-4" />
            Deactivate
          </button>
        </div>
      </div>

      {/* Formation Controls */}
      <div className="space-y-4">
        <h3 className="text-lg font-semibold text-cyan-300">Formation Patterns</h3>
        <div className="grid grid-cols-2 gap-2">
          {[
            { key: 'grid', label: 'Grid', icon: '⊞' },
            { key: 'circle', label: 'Circle', icon: '○' },
            { key: 'line', label: 'Line', icon: '—' },
            { key: 'swarm', label: 'Swarm', icon: '※' },
            { key: 'patrol', label: 'Patrol', icon: '⟲' },
            { key: 'random', label: 'Random', icon: '⚡' }
          ].map((form) => (
            <button
              key={form.key}
              onClick={() => onFormationChange(form.key as any)}
              className={`flex items-center justify-center gap-2 px-3 py-2 rounded-lg font-medium transition-all transform hover:scale-105
                ${formation === form.key 
                  ? 'bg-gradient-to-r from-cyan-600 to-blue-600 text-white shadow-lg shadow-cyan-500/25' 
                  : 'bg-gray-700 hover:bg-gray-600 text-gray-300'
                }`}
            >
              <span className="text-lg">{form.icon}</span>
              {form.label}
            </button>
          ))}
        </div>
      </div>

      {/* Mission Assignment */}
      <div className="space-y-4">
        <h3 className="text-lg font-semibold text-cyan-300 flex items-center gap-2">
          <Target className="w-5 h-5" />
          Mission Assignment
        </h3>
        
        <div className="space-y-3">
          <input
            type="text"
            value={missionInput}
            onChange={(e) => setMissionInput(e.target.value)}
            placeholder="Enter mission objective..."
            className="w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:border-cyan-500 focus:outline-none transition-colors"
          />
          
          <div className="flex gap-2">
            <select
              value={missionPriority}
              onChange={(e) => setMissionPriority(e.target.value as any)}
              className="flex-1 px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:border-cyan-500 focus:outline-none transition-colors"
            >
              <option value="low">Low Priority</option>
              <option value="medium">Medium Priority</option>
              <option value="high">High Priority</option>
              <option value="critical">Critical Priority</option>
            </select>
            
            <button
              onClick={handleAssignMission}
              disabled={!missionInput.trim() || selectedCount === 0}
              className="px-4 py-2 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 disabled:from-gray-600 disabled:to-gray-700 disabled:cursor-not-allowed text-white rounded-lg font-medium transition-all transform hover:scale-105 shadow-lg shadow-purple-500/25"
            >
              Assign
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};
