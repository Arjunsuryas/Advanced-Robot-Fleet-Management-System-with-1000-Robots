import React from 'react';
import { FleetStats } from '../types/FleetStats';
import { Battery, Activity, Users, CheckCircle, AlertCircle, Wrench, X, Zap, Brain, Target, TrendingUp, Shield } from 'lucide-react';

interface StatsPanelProps {
  stats: FleetStats;
}

export const StatsPanel: React.FC<StatsPanelProps> = ({ stats }) => {
  const StatCard: React.FC<{
    title: string;
    value: string | number;
    icon: React.ReactNode;
    color: string;
    subtitle?: string;
    trend?: 'up' | 'down' | 'stable';
  }> = ({ title, value, icon, color, subtitle, trend }) => (
    <div className={`bg-gray-900 border border-${color}-500 rounded-lg p-4 hover:border-${color}-400 transition-all transform hover:scale-105 shadow-lg hover:shadow-${color}-500/25`}>
      <div className="flex items-center justify-between mb-2">
        <div className={`text-${color}-400`}>{icon}</div>
        <div className="flex items-center gap-2">
          <span className={`text-2xl font-bold text-${color}-400`}>
            {typeof value === 'number' && value % 1 !== 0 ? value.toFixed(1) : value}
          </span>
          {trend && (
            <div className={`text-xs ${trend === 'up' ? 'text-green-400' : trend === 'down' ? 'text-red-400' : 'text-gray-400'}`}>
              {trend === 'up' ? '↗' : trend === 'down' ? '↘' : '→'}
            </div>
          )}
        </div>
      </div>
      <h3 className="text-sm font-medium text-gray-300">{title}</h3>
      {subtitle && <p className="text-xs text-gray-500 mt-1">{subtitle}</p>}
    </div>
  );

  const ProgressBar: React.FC<{
    label: string;
    value: number;
    max: number;
    color: string;
    showPercentage?: boolean;
  }> = ({ label, value, max, color, showPercentage = true }) => (
    <div className="space-y-2">
      <div className="flex justify-between text-sm">
        <span className="text-gray-300">{label}</span>
        {showPercentage && (
          <span className={`text-${color}-400 font-medium`}>{value.toFixed(1)}%</span>
        )}
      </div>
      <div className="w-full bg-gray-700 rounded-full h-3 overflow-hidden">
        <div 
          className={`bg-gradient-to-r from-${color}-600 to-${color}-400 h-3 rounded-full transition-all duration-500 shadow-lg shadow-${color}-500/30`}
          style={{ width: `${Math.min((value / max) * 100, 100)}%` }}
        />
      </div>
    </div>
  );

  const MetricRing: React.FC<{
    label: string;
    value: number;
    max: number;
    color: string;
    size?: number;
  }> = ({ label, value, max, color, size = 60 }) => {
    const percentage = (value / max) * 100;
    const circumference = 2 * Math.PI * (size / 2 - 5);
    const strokeDasharray = circumference;
    const strokeDashoffset = circumference - (percentage / 100) * circumference;

    return (
      <div className="flex flex-col items-center">
        <div className="relative">
          <svg width={size} height={size} className="transform -rotate-90">
            <circle
              cx={size / 2}
              cy={size / 2}
              r={size / 2 - 5}
              stroke="#374151"
              strokeWidth="4"
              fill="transparent"
            />
            <circle
              cx={size / 2}
              cy={size / 2}
              r={size / 2 - 5}
              stroke={`var(--${color}-500)`}
              strokeWidth="4"
              fill="transparent"
              strokeDasharray={strokeDasharray}
              strokeDashoffset={strokeDashoffset}
              className="transition-all duration-500"
              style={{ filter: `drop-shadow(0 0 6px var(--${color}-500))` }}
            />
          </svg>
          <div className="absolute inset-0 flex items-center justify-center">
            <span className={`text-sm font-bold text-${color}-400`}>
              {value.toFixed(0)}%
            </span>
          </div>
        </div>
        <span className="text-xs text-gray-400 mt-1 text-center">{label}</span>
      </div>
    );
  };

  return (
    <div className="space-y-6">
      {/* Fleet Overview */}
      <div className="bg-gray-900 border border-cyan-500 rounded-lg p-6 shadow-2xl">
        <h2 className="text-xl font-bold text-cyan-400 mb-6 flex items-center gap-2">
          <Activity className="w-6 h-6" />
          Fleet Overview
        </h2>
        
        <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
          <StatCard
            title="Total Fleet"
            value={stats.totalRobots}
            icon={<Users className="w-6 h-6" />}
            color="cyan"
            trend="stable"
          />
          <StatCard
            title="Active Units"
            value={stats.activeRobots}
            icon={<CheckCircle className="w-6 h-6" />}
            color="green"
            subtitle={`${((stats.activeRobots / stats.totalRobots) * 100).toFixed(1)}% operational`}
            trend="up"
          />
          <StatCard
            title="Charging"
            value={stats.chargingRobots}
            icon={<Zap className="w-6 h-6" />}
            color="blue"
            subtitle={`${((stats.chargingRobots / stats.totalRobots) * 100).toFixed(1)}% charging`}
          />
          <StatCard
            title="On Patrol"
            value={stats.patrolRobots}
            icon={<Shield className="w-6 h-6" />}
            color="purple"
            subtitle="Security operations"
          />
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          <div className="lg:col-span-3 space-y-4">
            <ProgressBar
              label="Fleet Battery Level"
              value={stats.averageBattery}
              max={100}
              color="green"
            />
            <ProgressBar
              label="System Efficiency"
              value={stats.averageEfficiency}
              max={100}
              color="blue"
            />
            <ProgressBar
              label="Fleet Health Status"
              value={stats.averageHealth}
              max={100}
              color="cyan"
            />
          </div>
          
          <div className="flex justify-center">
            <MetricRing
              label="Overall Performance"
              value={stats.fleetPerformance.overallEfficiency}
              max={100}
              color="cyan"
              size={80}
            />
          </div>
        </div>
      </div>

      {/* Advanced Performance Metrics */}
      <div className="bg-gray-900 border border-blue-500 rounded-lg p-6 shadow-2xl">
        <h2 className="text-xl font-bold text-blue-400 mb-6 flex items-center gap-2">
          <Brain className="w-6 h-6" />
          AI Performance Analytics
        </h2>
        
        <div className="grid grid-cols-2 lg:grid-cols-5 gap-4 mb-6">
          <MetricRing
            label="AI Optimization"
            value={stats.fleetPerformance.aiOptimization}
            max={100}
            color="blue"
          />
          <MetricRing
            label="Communication"
            value={stats.fleetPerformance.communicationHealth}
            max={100}
            color="green"
          />
          <MetricRing
            label="Energy Efficiency"
            value={100 - stats.fleetPerformance.energyConsumption}
            max={100}
            color="yellow"
          />
          <MetricRing
            label="Uptime"
            value={100 - stats.fleetPerformance.predictedDowntime}
            max={100}
            color="purple"
          />
          <MetricRing
            label="Response Time"
            value={Math.max(0, 100 - stats.missionStats.averageResponseTime * 10)}
            max={100}
            color="orange"
          />
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
          <div className="bg-gray-800 border border-blue-500/30 rounded-lg p-4">
            <h3 className="text-blue-300 font-semibold mb-2">Predictive Analytics</h3>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span className="text-gray-400">Performance Trend:</span>
                <span className={`font-medium ${
                  stats.predictiveAnalytics.performanceTrends === 'improving' ? 'text-green-400' :
                  stats.predictiveAnalytics.performanceTrends === 'stable' ? 'text-blue-400' : 'text-red-400'
                }`}>
                  {stats.predictiveAnalytics.performanceTrends.toUpperCase()}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-400">Risk Level:</span>
                <span className={`font-medium ${
                  stats.predictiveAnalytics.riskAssessment === 'low' ? 'text-green-400' :
                  stats.predictiveAnalytics.riskAssessment === 'medium' ? 'text-yellow-400' : 'text-red-400'
                }`}>
                  {stats.predictiveAnalytics.riskAssessment.toUpperCase()}
                </span>
              </div>
            </div>
          </div>

          <div className="bg-gray-800 border border-green-500/30 rounded-lg p-4">
            <h3 className="text-green-300 font-semibold mb-2">Mission Control</h3>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span className="text-gray-400">Active Missions:</span>
                <span className="text-green-400 font-medium">{stats.missionStats.activeMissions}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-400">Success Rate:</span>
                <span className="text-green-400 font-medium">{stats.missionStats.completionRate.toFixed(1)}%</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-400">Critical Tasks:</span>
                <span className="text-red-400 font-medium">{stats.missionStats.criticalTasks}</span>
              </div>
            </div>
          </div>

          <div className="bg-gray-800 border border-yellow-500/30 rounded-lg p-4">
            <h3 className="text-yellow-300 font-semibold mb-2">Maintenance</h3>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span className="text-gray-400">Alerts:</span>
                <span className="text-yellow-400 font-medium">{stats.predictiveAnalytics.maintenanceAlerts}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-400">Battery Replacements:</span>
                <span className="text-orange-400 font-medium">{stats.predictiveAnalytics.batteryReplacements}</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Mission Management */}
      <div className="bg-gray-900 border border-green-500 rounded-lg p-6 shadow-2xl">
        <h2 className="text-xl font-bold text-green-400 mb-6 flex items-center gap-2">
          <Target className="w-6 h-6" />
          Mission Management
        </h2>
        
        <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
          <StatCard
            title="Active Missions"
            value={stats.missionStats.activeMissions}
            icon={<Activity className="w-6 h-6" />}
            color="green"
          />
          <StatCard
            title="Completed Tasks"
            value={stats.completedTasks}
            icon={<CheckCircle className="w-6 h-6" />}
            color="blue"
          />
          <StatCard
            title="Critical Priority"
            value={stats.missionStats.criticalTasks}
            icon={<AlertCircle className="w-6 h-6" />}
            color="red"
          />
          <StatCard
            title="Response Time"
            value={`${stats.missionStats.averageResponseTime.toFixed(1)}s`}
            icon={<TrendingUp className="w-6 h-6" />}
            color="purple"
          />
        </div>
      </div>

      {/* System Alerts */}
      <div className="bg-gray-900 border border-red-500 rounded-lg p-6 shadow-2xl">
        <h2 className="text-xl font-bold text-red-400 mb-6 flex items-center gap-2">
          <AlertCircle className="w-6 h-6" />
          System Status & Alerts
        </h2>
        
        <div className="space-y-3">
          {stats.errorRobots > 0 && (
            <div className="flex items-center gap-3 p-4 bg-red-900/30 border border-red-600 rounded-lg animate-pulse">
              <AlertCircle className="w-5 h-5 text-red-400" />
              <div className="flex-1">
                <span className="text-red-300 font-medium">{stats.errorRobots} robots in error state</span>
                <p className="text-red-400/70 text-sm">Immediate attention required</p>
              </div>
            </div>
          )}
          
          {stats.averageBattery < 30 && (
            <div className="flex items-center gap-3 p-4 bg-yellow-900/30 border border-yellow-600 rounded-lg">
              <Battery className="w-5 h-5 text-yellow-400" />
              <div className="flex-1">
                <span className="text-yellow-300 font-medium">Low fleet battery warning</span>
                <p className="text-yellow-400/70 text-sm">Average battery below 30% - schedule charging</p>
              </div>
            </div>
          )}
          
          {stats.predictiveAnalytics.maintenanceAlerts > 50 && (
            <div className="flex items-center gap-3 p-4 bg-orange-900/30 border border-orange-600 rounded-lg">
              <Wrench className="w-5 h-5 text-orange-400" />
              <div className="flex-1">
                <span className="text-orange-300 font-medium">High maintenance requirements</span>
                <p className="text-orange-400/70 text-sm">{stats.predictiveAnalytics.maintenanceAlerts} units need attention</p>
              </div>
            </div>
          )}
          
          {stats.predictiveAnalytics.riskAssessment === 'high' && (
            <div className="flex items-center gap-3 p-4 bg-red-900/30 border border-red-600 rounded-lg animate-pulse">
              <Shield className="w-5 h-5 text-red-400" />
              <div className="flex-1">
                <span className="text-red-300 font-medium">High risk assessment detected</span>
                <p className="text-red-400/70 text-sm">Review fleet operations and safety protocols</p>
              </div>
            </div>
          )}
          
          {stats.errorRobots === 0 && stats.averageBattery >= 50 && stats.predictiveAnalytics.riskAssessment === 'low' && (
            <div className="flex items-center gap-3 p-4 bg-green-900/30 border border-green-600 rounded-lg">
              <CheckCircle className="w-5 h-5 text-green-400" />
              <div className="flex-1">
                <span className="text-green-300 font-medium">All systems operating optimally</span>
                <p className="text-green-400/70 text-sm">Fleet performance within normal parameters</p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};
